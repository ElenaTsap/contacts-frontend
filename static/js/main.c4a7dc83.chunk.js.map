{"version":3,"sources":["components/Card.js","pages/Contacts.js","pages/Auth.js","pages/GetContact.js","App.js","reportWebVitals.js","index.js"],"names":["Card","updater","contact","deleteContact","useState","isEditable","setIsEditable","fullName","email","phone","address","avatar","bgColor","setBgColor","editedContact","_id","editCardHandler","e","info","id","target","getAttribute","files","innerText","editCheckHandler","console","log","charCode","preventDefault","className","style","backgroundColor","data-id","type","onChange","src","onKeyPress","onBlur","contentEditable","onClick","finalForm","FormData","Object","keys","forEach","key","append","options","method","headers","localStorage","getItem","body","fetch","then","data","json","output","status","setTimeout","alert","message","catch","err","Contacts","history","useHistory","form","setForm","contacts","setContacts","useEffect","push","fillForm","field","newForm","value","cards","newContacts","updatedIndex","findIndex","length","map","response","newList","filter","onSubmit","res","errors","placeholder","required","props","pass","JSON","stringify","nativeEvent","submitter","result","setItem","token","name","GetContact","Array","from","file","values","fromEntries","multiple","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.c4a7dc83.chunk.js","sourcesContent":["import React from 'react'\nimport { useState } from 'react';\nimport './Card.css'\n\nconst Card = ({ updater, contact, deleteContact }) => {\n    const [isEditable, setIsEditable] = useState(false);\n    const { fullName, email, phone, address, avatar } = contact;\n    const [bgColor, setBgColor] = useState('rgba(173, 174, 247, 0.342)')\n\n    /* const editedContact = {...contact} */\n    //we can send only the specific edited fields\n    const editedContact = {_id: contact._id };\n\n    const editToggle = () => {\n        setIsEditable(!isEditable);\n        setBgColor(isEditable ? 'rgba(173, 174, 247, 0.342)' : 'gray')\n    }\n\n    const editCardHandler = (e) => {\n        const id = e.target.getAttribute(\"data-id\");\n\n        let info;\n        if (id == 'file') {\n            info = e.target.files[0];\n        } else {\n            info = e.target.innerText;\n        }\n        editedContact[id] = info;\n    }\n\n    const editCheckHandler = (e) => {\n        console.log('input', e);\n        if (e.charCode == 13) {\n            e.preventDefault();\n        }\n    }\n\n    const updateContactHandler = () => {\n        console.log(editedContact);\n\n        let finalForm = new FormData();\n\n        Object.keys(editedContact).forEach(key => {\n            finalForm.append(key, editedContact[key]) \n        })\n\n        const url = 'https://contact-list-backend-2021.herokuapp.com/contacts/update';\n        const options = {\n        method: 'POST',\n        headers: {\n            'x-auth-token': localStorage.getItem('token')\n        },\n        body: finalForm\n        }\n\n        fetch(url, options)\n        .then( data => data.json().then(output => {\n            if (output.status === 'success') {\n                setIsEditable(false)\n                setBgColor('green')\n                setTimeout(() => {\n                    setBgColor('rgba(173, 174, 247, 0.342)')\n                }, 1000);\n                if (output.data.avatar) {\n                    console.log(output.data);\n                    updater(output.data._id, output.data.avatar);\n                }\n                \n            } else {\n                setBgColor('coral')\n                alert(output.message.message);\n            }\n        })\n        ).catch(err => setBgColor('coral'))\n    }\n\n    return (\n        <div className = \"card\" style = {{backgroundColor: bgColor}}>\n            {isEditable ? \n            <input data-id=\"file\" type=\"file\" onChange = {editCardHandler} /> : \n            <img src={\"https://contact-list-backend-2021.herokuapp.com/avatars/\" + avatar}/>}\n            <div>\n                <p>name: &nbsp;</p>\n                <p data-id=\"fullName\" \n                    onKeyPress = {editCheckHandler} \n                    onBlur = {editCardHandler} \n                    contentEditable = {isEditable}\n                >\n                    {fullName}\n                </p>\n            </div>\n            <div>\n                <p>email: &nbsp;</p>\n                <p data-id=\"email\" \n                    onKeyPress = {editCheckHandler} \n                    onBlur = {editCardHandler} \n                    contentEditable = {isEditable}\n                >\n                    {email}\n                </p>\n            </div>\n            <div>\n                <p>phone: &nbsp;</p>\n                <p data-id=\"phone\" \n                    onKeyPress = {editCheckHandler} \n                    onBlur = {editCardHandler} \n                    contentEditable = {isEditable}\n                >\n                    {phone}\n                </p>\n            </div>\n            <div>\n                <p>address: &nbsp;</p>\n                <p data-id=\"address\" \n                    onKeyPress = {editCheckHandler} \n                    onBlur = {editCardHandler} \n                    contentEditable = {isEditable}\n                >\n                    {address}\n                </p>\n            </div>\n            <div>\n                <button onClick = {editToggle}>Edit</button>\n                <button onClick = {updateContactHandler}>Save</button>\n                <button onClick = {deleteContact}>Delete</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Card\n","import { useState, useEffect } from 'react';\nimport Card from '../components/Card'\nimport './Contacts.css'\nimport { useHistory } from 'react-router-dom';\n\nfunction Contacts() {\n  let history = useHistory();\n\n  const [form, setForm] = useState({\n    fullName: '',\n    email: '',\n    phone: '',\n    address: ''\n  });\n\n  const [contacts, setContacts] = useState([]);\n  //creating a useEffect that runs at every update\n  //if there is no token in the local storage it redirects to the auth page\n  useEffect(() => {\n    if (!localStorage.getItem('token')) {\n      history.push('/auth');\n    }\n  })\n\n  const headers = {\n      'Content-Type': 'application/json',\n      'x-auth-token': localStorage.getItem('token')\n  }\n\n  const fillForm = (e, field) => {\n    let newForm = {\n      ...form\n    };\n    newForm[field] = e.target.value;\n    setForm(newForm);\n  }\n\n  const formSubmitHandler = (e) => {\n    e.preventDefault();\n\n    let finalForm = new FormData(); //by default content type is multipart/form-data\n\n    finalForm.append('fullName', form.fullName);\n    finalForm.append('email', form.email);\n    finalForm.append('phone', form.phone);\n    finalForm.append('address', form.address);\n    finalForm.append('file', e.target[4].files[0]);\n\n    console.log(finalForm);\n    const url = 'https://contact-list-backend-2021.herokuapp.com/contacts/new';\n    const options = {\n      method: 'POST',\n      headers: {      \n        'x-auth-token': localStorage.getItem('token')\n      },\n      body: finalForm\n    }\n\n    fetch(url, options)\n      .then(response => response.json().then(res => {\n        if (res.errors) {\n          alert(` ${res.message} `);\n        } else {\n          setContacts([...contacts, res])\n        }\n      })).catch(err => console.log(err))\n\n    /* setContacts([...contacts, form]) */\n  }\n\n  useEffect(() => {\n    const url = 'https://contact-list-backend-2021.herokuapp.com/contacts/all';\n    const options = {\n      headers\n    }\n\n    fetch(url, options).then(data => data.json().then(output => {\n      if (output.status === 'success') {\n        setContacts(output.data)\n      } else {\n        console.log(output.message);\n      }\n    }))\n  }, [])\n\n  const deleteContact = (id) => {\n    const url = 'https://contact-list-backend-2021.herokuapp.com/contacts/' + id;\n    const options = {\n      method: 'DELETE',\n      headers\n    }\n\n    fetch(url, options)\n      .then(response => response.json().then(output => {\n        //catching back end errors with if/else\n        if (output.status === 'success') {\n          alert(output.message)\n          const newList = contacts.filter(contact => {\n            if (contact._id != output.data) {\n              return contact\n            }\n          })\n          setContacts(newList);\n        } else {\n          alert('theres an error! please check console')\n          console.log(output.message);\n        }\n        //catching errors on the communication between client side and server side\n      })).catch(err => alert(err));\n  }\n\n  const updater = (id, avatar) => {\n    let newContacts = [...contacts]\n    let updatedIndex = newContacts.findIndex(contact => contact._id === id);\n    newContacts[updatedIndex].avatar = avatar;\n\n    setContacts(newContacts);\n  }\n  \n  let cards;\n  if (typeof(contacts)==='object' && contacts.length > 0) {\n    cards = contacts.map(contact => \n      <Card \n        updater={updater}\n        key={contact._id} \n        contact = {contact}\n        deleteContact = {() => deleteContact(contact._id)}\n      />)\n  }\n\n    return (\n      <div className='App'>\n        <h1>My Contact List</h1>\n        <form className=\"form\" onSubmit = {formSubmitHandler}> \n          <input placeholder=\"Full name\" required value = {form.fullName} onChange = {(e) => fillForm(e, \"fullName\")}/>\n          <input placeholder=\"Email\" type = \"email\" value = {form.email} onChange = {(e) => fillForm(e, \"email\")}/>\n          <input placeholder=\"Phone number\" type = \"tel\" value = {form.phone} onChange = {(e) => fillForm(e, \"phone\")}/>\n          <input placeholder=\"Address\" value = {form.address}  onChange = {(e) => fillForm(e, \"address\")}/>\n          <input type=\"file\"/>\n          <button>Create Contact</button>\n        </form>\n\n        <section className = \"card-section\">\n          {cards}\n        </section>\n      </div>\n    );\n  }\n\n  export default Contacts;\n\n\n  /* resetting the form after submitting    \n\n  setForm({\n                fullName: '', \n                email: '', \n                phone: '', \n                address: ''\n              }) */\n\n\n\n","import './Auth.css'\nimport { useHistory } from 'react-router-dom';\n\nexport default function (props) {\n    let history = useHistory();\n    let submitHandler = (e) => {\n        e.preventDefault(); \n\n        let data = {}; //create an object to fill in the form information\n\n        //first we have to make sure that the name email is the same as backend (case sensitive!)\n        //this is not the secure way to do it since if we change the order of input fields it does not work!\n        data.email = e.target[0].value;\n        data.pass = e.target[1].value;\n\n        let urlRegister = 'https://contact-list-backend-2021.herokuapp.com/auth/register';\n        let urlLogin = 'https://contact-list-backend-2021.herokuapp.com/auth/login';\n        let options = {\n            method :'POST',\n            headers : {\n                'Content-Type': 'application/json'\n            },\n            body:JSON.stringify(data)\n        }\n\n        if (e.nativeEvent.submitter.id == \"register\") {\n            fetch(urlRegister, options)\n            .then(result => result.json()\n            .then(output => console.log(output.message)/* props.loginSetter(true) */))\n            /* props.userSetter(data.email); */\n            \n        } else if (e.nativeEvent.submitter.id == \"login\") {\n            fetch(urlLogin, options)\n            .then(result => result.json()\n            .then(output=>{\n                console.log(output);\n                localStorage.setItem('token', output.token);\n                history.push('/contacts')\n                /* if (output.status == 'success') {\n                    localStorage.setItem('token', output.token);\n                    props.loginSetter(true);\n                    props.userSetter(data.email);\n                } else {\n                    alert('fail')\n                } */}))\n        }\n    }\n\n    return (\n        <div className='wrapper'>\n            <form onSubmit = {submitHandler}>\n                <h2>Login or Register</h2>\n                <input name = \"email\" type = \"email\"/>\n                <input name = \"pass\" type =\"password\"/>\n                <section>\n                    <input id =\"register\" type = \"submit\" value =\"Register\"/>\n                    <input id =\"login\" type = \"submit\" value =\"Login\"/>\n                </section>\n            </form>\n        </div>\n    )\n}\n","import React from 'react'\nimport './GetContacts.css'\n\nconst GetContact = () => {\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n/* \n        let data = {};\n\n        data.fullName = e.target[0].value;\n        data.email = e.target[1].value;\n        data.phone = e.target[2].value;\n        data.message = e.target[3].value; */\n\n        console.log(e.target[4].files);\n        let data = new FormData();\n        data.append('fullName', e.target[0].value);\n        data.append('email', e.target[1].value);\n        data.append('phone', e.target[2].value);\n        data.append('message', e.target[3].value);\n        \n        //append stringifies the array so we have to append one by one\n        // we can append be sending with the same key\n        Array.from(e.target[4].files).forEach(file => {\n            data.append('attachments', file);\n        });\n\n        //way no.1 to do it\n        for (var value of data.values()) {\n            console.log(value);\n        }\n\n        //way no.2 to do it\n        console.log(Object.fromEntries(data));\n\n        let url = 'https://contact-list-backend-2021.herokuapp.com/get-contact';\n        \n        let options = {\n            method :'POST',\n            body:data\n        }\n\n        fetch(url, options)\n            .then(result => result.json().then(output => {\n                    if (output.status === 'success') {\n                        alert('Congrats, your message was successfully sent!')\n                    } else {\n                        alert(output.message)\n                    }\n                    console.log(output);\n                })\n            );\n    }\n\n    return (\n        <div className=\"get-contact\">\n            <h1>Contact Us</h1>\n            <form  className=\"contact-form\" onSubmit={submitHandler}>\n                <input type=\"text\" placeholder=\"Full Name\"/>\n                <input type=\"email\" placeholder=\"Email\"/>\n                <input type=\"tel\" placeholder=\"Phone\"/>\n                <textarea type=\"text\" placeholder=\"Message\"/>\n                <input type=\"file\" multiple/>\n                <button>Send message</button>\n            </form>\n        </div>\n    )\n}\n\nexport default GetContact\n","import './App.css';\nimport Contacts from './pages/Contacts'\nimport Auth from './pages/Auth'\nimport { Switch, Route } from 'react-router-dom';\nimport GetContact from './pages/GetContact';\n\nfunction App() {\n\n    return (\n      <Switch>\n        <Route path=\"/auth\">\n          <Auth/>\n        </Route>\n        <Route path=\"/contacts\">\n          <Contacts/>\n        </Route>\n        <Route path=\"/get-contact\">\n          <GetContact />\n        </Route>\n        <Route path=\"/\">\n          <Auth/>\n        </Route>\n      </Switch>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}